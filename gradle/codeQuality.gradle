// Creates tasks based on the application build variant (productFlavor + buildType = variant)
(android.hasProperty("applicationVariants")
        ? android."applicationVariants"
        : android."libraryVariants").all { variant ->

    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class']

    // Generates Lint reports based off the source code.
    variant.assemble.dependsOn "lint$variantName"

    /**
     * Generates Jacoco coverage reports based off the unit tests.
     */
    task("jacoco${variantName}Report", type: JacocoReport,
            dependsOn: "test${variantName}UnitTest") {
        group "Reporting"
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        // variant.javaCompile.source does not work
        // traverses from starting point
        sourceDirectories = files(android.sourceSets.main.java.srcDirs)
        executionData = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
        // TODO variant.javaCompiler.destinationDir does not return java 7 .class files
        classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/${variantName}",
                excludes: autoGenerated)
    }
}
